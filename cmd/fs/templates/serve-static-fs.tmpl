package {{ .Package }}

// Code generated by embed-static. DO NOT EDIT.

import (
	"embed"
	"fmt"
	"github.com/gin-contrib/static"
	"github.com/gin-gonic/gin"
	"io/fs"
	"net/http"
	"strings"
)

//go:embed {{ .Directory }}
var staticFiles embed.FS

var (
	embedStaticFS staticFS
	embedIndexFS indexFS
)

// staticFS wraps http.FileSystem to expose an embed.FS
// as a serve-able filesystem
type staticFS struct {
	http.FileSystem
}

// indexFS extends upon staticFS, serving a default file any time
// the root directory is requested
type indexFS struct {
	staticFS *staticFS
}

func (r indexFS) Exists(prefix string, path string) bool {
	return true
}

func (r indexFS) Open(path string) (http.File, error) {
	return r.staticFS.Open("{{ .IndexFile }}")
}

func (s staticFS) Exists(prefix string, path string) bool {
	realpath := fmt.Sprintf("{{ .Directory }}%s", path)

	if strings.HasSuffix(path, "/") {
		_, err := staticFiles.ReadDir(strings.TrimSuffix(realpath, "/"))
		return err == nil
	}

	f, err := staticFiles.Open(realpath)
	if f != nil {
		_ = f.Close()
	}
	return err == nil
}

func initFS(){
	subDir, err := fs.Sub(staticFiles, "{{ .Directory }}")
	if err != nil {
		panic(err)
	}
	embedStaticFS.FileSystem = http.FS(subDir)
	embedIndexFS.staticFS = &embedStaticFS
}

func AddEmbeddedRoutes(router *gin.Engine, urlPrefix string){
	initFS()
	router.Use(static.Serve(urlPrefix, embedStaticFS))
	router.Use(static.Serve(urlPrefix, embedIndexFS))
}